// Prisma schema for Beat Sage â€“ single source of truth for DB and types

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ----------------------
// NextAuth core models
// ----------------------

model User {
  id             String    @id @default(uuid()) @db.Uuid
  email          String    @unique
  username       String?   @unique
  name           String?
  image          String?
  emailVerified  DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  // Project-specific fields
  acl            Json?
  serviceAccess  Json?

  accounts       Account[]
  sessions       Session[]
  createdChats   Chat[]     @relation("UserCreatedChats")
  agents         Agent[]    @relation("UserAgents")
  messages       Message[]  @relation("UserMessages")
  characters     Character[]
  // Pruned models: Project, Task

  @@map("users")
}

model Account {
  id                 String  @id @default(uuid()) @db.Uuid
  userId             String  @db.Uuid
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user               User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id            String   @id @default(uuid()) @db.Uuid
  sessionToken  String   @unique
  userId        String   @db.Uuid
  expires       DateTime

  user          User     @relation(fields: [userId], references: [id])

  @@map("sessions")
}

model VerificationToken {
  identifier  String
  token       String
  expires     DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

// ----------------------
// Core domain models
// ----------------------

model Model {
  id                  String   @id @default(uuid()) @db.Uuid
  provider            String
  modelKey            String
  displayName         String
  contextWindowTokens Int      @default(0)
  isActive            Boolean  @default(true)
  priceInputPer1k     Decimal?
  priceOutputPer1k    Decimal?
  totalRequests       BigInt   @default(0)
  totalInputTokens    BigInt   @default(0)
  totalOutputTokens   BigInt   @default(0)
  lastUsedAt          DateTime?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  agents              Agent[]
  messages            Message[]

  @@map("models")
}

model Agent {
  id             String   @id @default(uuid()) @db.Uuid
  ownerId        String   @db.Uuid
  defaultModelId String?  @db.Uuid
  name           String
  description    String?
  instructions   String?
  tools          Json?
  acl            Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  owner          User     @relation("UserAgents", fields: [ownerId], references: [id])
  defaultModel   Model?   @relation(fields: [defaultModelId], references: [id])
  messages       Message[]
  chats          Chat[]
  // Pruned models: Project, Task

  @@map("agents")
}

model Chat {
  id           String   @id @default(uuid()) @db.Uuid
  createdBy    String   @db.Uuid
  agentId      String?  @db.Uuid
  title        String
  systemPrompt String?
  archived     Boolean  @default(false)
  acl          Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  creator      User     @relation("UserCreatedChats", fields: [createdBy], references: [id])
  agent        Agent?   @relation(fields: [agentId], references: [id])
  messages     Message[]

  @@map("chats")
}

model Message {
  id             String   @id @default(uuid()) @db.Uuid
  chatId         String   @db.Uuid
  senderUserId   String?  @db.Uuid
  senderAgentId  String?  @db.Uuid
  role           String
  content        String
  modelId        String?  @db.Uuid
  inputTokens    Int?
  outputTokens   Int?
  costUSD        Decimal?
  toolCalls      Json?
  toolResults    Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  chat           Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  senderUser     User?    @relation("UserMessages", fields: [senderUserId], references: [id])
  senderAgent    Agent?   @relation(fields: [senderAgentId], references: [id])
  model          Model?   @relation(fields: [modelId], references: [id])

  @@map("messages")
}


// ----------------------
// Memory models
// ----------------------

model Memory {
  id             String   @id @default(uuid()) @db.Uuid
  // Ownership and context
  userId         String?  @db.Uuid
  agentId        String?  @db.Uuid
  chatId         String?  @db.Uuid

  // Core content and typing
  title          String?
  content        String
  type           String
  source         String
  tags           String[]

  // Associations/graph
  associatedIds  String[]

  // Access control per entry (row-level ACL)
  acl            Json?

  // Observability & hygiene
  importance     Int       @default(0)
  pinned         Boolean   @default(false)
  lastAccessedAt DateTime?
  usageCount     Int       @default(0)

  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@index([userId])
  @@index([agentId])
  @@index([chatId])
  @@index([type])
  @@map("memories")
}

// ----------------------
// Beat Sage game models
// ----------------------

enum Direction {
  Up
  Down
  Left
  Right
}

enum TargetPriority {
  Closest
  HighestHealth
  LowestHealth
  Furthest
}

enum PartyStatus {
  Lobby
  Ready
  InInstance
  Complete
}

enum InstanceStatus {
  Pending
  Active
  Complete
  Failed
}

enum MobStatus {
  Alive
  Dead
}

model Character {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  name      String
  online    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id])
  mana      Mana?
  skills    Skill[]
  members   PartyMember[]
  hostedParty Party?

  @@index([userId])
}

model Mana {
  id          String   @id @default(uuid()) @db.Uuid
  characterId String   @unique @db.Uuid
  current     Int      @default(0)
  maximum     Int      @default(100)
  experience  Int      @default(0)
  rate        Int      @default(0)
  maxRate     Int      @default(5)

  character   Character @relation(fields: [characterId], references: [id], onDelete: Cascade)
}

model Skill {
  id             String         @id @default(uuid()) @db.Uuid
  characterId    String         @db.Uuid
  name           String
  manaCost       Int
  damage         Int
  cooldownMs     Int
  lastCastAt     DateTime?
  mastery        Int            @default(0)
  totalCasts     Int            @default(0)
  priority       Int?
  targetPriority TargetPriority
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  character      Character      @relation(fields: [characterId], references: [id], onDelete: Cascade)

  @@unique([characterId, priority])
  @@index([characterId])
}

model Genre {
  id          String   @id @default(uuid()) @db.Uuid
  name        String   @unique
  description String?
  songs       Song[]
}

model Song {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  genreId   String   @db.Uuid
  src       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  genre     Genre    @relation(fields: [genreId], references: [id])
  beats     SongBeat[]
  instances Instance[]
}

model SongBeat {
  id        String    @id @default(uuid()) @db.Uuid
  songId    String    @db.Uuid
  index     Int
  timeMs    Int
  direction Direction
  holdMs    Int       @default(0)

  song      Song      @relation(fields: [songId], references: [id], onDelete: Cascade)

  @@unique([songId, index])
  @@index([songId])
}

model Location {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  coordinates String?
  image       String?
  difficulty  Int
  instances   Instance[]
}

model Mob {
  id                   String   @id @default(uuid()) @db.Uuid
  name                 String
  image                String?
  healthBase           Int
  healthMultiplier     Decimal
  damageBase           Int
  damageMultiplier     Decimal
  xpBase               Int
  xpMultiplier         Decimal
  spawnRate            Float
  spawnRateMultiplier  Float
  instanceMobs         InstanceMob[]
}

model Party {
  id               String      @id @default(uuid()) @db.Uuid
  hostCharacterId  String      @unique @db.Uuid
  status           PartyStatus @default(Lobby)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  host             Character   @relation(fields: [hostCharacterId], references: [id])
  members          PartyMember[]
  instances        Instance[]
}

model PartyMember {
  id           String    @id @default(uuid()) @db.Uuid
  partyId      String    @db.Uuid
  characterId  String    @unique @db.Uuid
  isReady      Boolean   @default(false)

  party        Party     @relation(fields: [partyId], references: [id], onDelete: Cascade)
  character    Character  @relation(fields: [characterId], references: [id])

  @@unique([partyId, characterId])
  @@index([partyId])
}

model Instance {
  id          String         @id @default(uuid()) @db.Uuid
  partyId     String         @db.Uuid
  locationId  String         @db.Uuid
  songId      String         @db.Uuid
  status      InstanceStatus @default(Pending)
  startedAt   DateTime?
  endedAt     DateTime?

  party       Party          @relation(fields: [partyId], references: [id])
  location    Location       @relation(fields: [locationId], references: [id])
  song        Song           @relation(fields: [songId], references: [id])
  mobs        InstanceMob[]

  @@index([partyId])
  @@index([locationId])
  @@index([songId])
}

model InstanceMob {
  id            String     @id @default(uuid()) @db.Uuid
  instanceId    String     @db.Uuid
  mobId         String     @db.Uuid
  healthCurrent Int
  status        MobStatus  @default(Alive)
  distance      Int
  xpPerDamage   Int
  damagePerHit  Int

  instance      Instance   @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  mob           Mob        @relation(fields: [mobId], references: [id])

  @@index([instanceId])
  @@index([mobId])
}
