// AUTO-GENERATED by generateServiceDocs.ts
export type ToolSpec = { name: string; service: string; method: string; access: string; entryScoped: boolean; payloadType: string; responseType: string };
export const ALL_TOOLS: ToolSpec[] = [{ name: "agentService:createAgent", service: "agentService", method: "createAgent", access: "Read", entryScoped: false, payloadType: "{ name: string; description?: string; instructions?: string; defaultModelId?: string; }", responseType: "{ id: string; }" },{ name: "agentService:deleteAgent", service: "agentService", method: "deleteAgent", access: "Admin", entryScoped: true, payloadType: "{ id: string; }", responseType: "{ id: string; deleted: true; }" },{ name: "agentService:listAll", service: "agentService", method: "listAll", access: "Read", entryScoped: false, payloadType: "{ page?: number; pageSize?: number; }", responseType: "{ id: string; name: string; }[]" },{ name: "agentService:listMine", service: "agentService", method: "listMine", access: "Read", entryScoped: false, payloadType: "{ page?: number; pageSize?: number; }", responseType: "{ id: string; name: string; }[]" },{ name: "agentService:updateAgent", service: "agentService", method: "updateAgent", access: "Moderate", entryScoped: true, payloadType: "{ id: string; data: Partial<{ name: string; description?: string; instructions?: string; defaultModelId?: string; }>; }", responseType: "{ id: string; } | undefined" },{ name: "characterService:createCharacter", service: "characterService", method: "createCharacter", access: "Read", entryScoped: false, payloadType: "{ name: string; }", responseType: "{ id: string; }" },{ name: "characterService:listMine", service: "characterService", method: "listMine", access: "Read", entryScoped: false, payloadType: "{ page?: number; pageSize?: number; }", responseType: "{ name: string; id: string; createdAt: Date; updatedAt: Date; userId: string; online: boolean; }[]" },{ name: "characterService:updateCharacter", service: "characterService", method: "updateCharacter", access: "Moderate", entryScoped: true, payloadType: "{ id: string; patch: { name?: string; online?: boolean; }; }", responseType: "{ name: string; id: string; createdAt: Date; updatedAt: Date; userId: string; online: boolean; } | undefined" },{ name: "chatService:attachAgent", service: "chatService", method: "attachAgent", access: "Moderate", entryScoped: false, payloadType: "{ id: string; agentId: string | null; }", responseType: "{ id: string; agentId: string | null; }" },{ name: "chatService:createChat", service: "chatService", method: "createChat", access: "Read", entryScoped: false, payloadType: "{ title: string; agentId?: string; members?: Array<{ userId: string; level: \"Read\" | \"Moderate\" | \"Admin\"; }>; }", responseType: "{ id: string; }" },{ name: "chatService:inviteUser", service: "chatService", method: "inviteUser", access: "Moderate", entryScoped: false, payloadType: "{ id: string; userId: string; level: \"Read\" | \"Moderate\" | \"Admin\"; }", responseType: "{ id: string; }" },{ name: "chatService:leaveChat", service: "chatService", method: "leaveChat", access: "Read", entryScoped: false, payloadType: "{ id: string; }", responseType: "{ id: string; }" },{ name: "chatService:listMyChats", service: "chatService", method: "listMyChats", access: "Read", entryScoped: false, payloadType: "{ page?: number; pageSize?: number; }", responseType: "import(\"/Users/root1/Dev/beat-sage/shared/types\").ChatListItem[]" },{ name: "chatService:removeUser", service: "chatService", method: "removeUser", access: "Moderate", entryScoped: false, payloadType: "{ id: string; userId: string; }", responseType: "{ id: string; }" },{ name: "chatService:subscribeWithMessages", service: "chatService", method: "subscribeWithMessages", access: "Read", entryScoped: false, payloadType: "{ id: string; limit?: number; }", responseType: "{ chat: import(\"/Users/root1/Dev/beat-sage/shared/types\").ChatListItem | null; messages: import(\"/Users/root1/Dev/beat-sage/shared/types\").ChatThreadMessage[]; }" },{ name: "chatService:updateTitle", service: "chatService", method: "updateTitle", access: "Moderate", entryScoped: true, payloadType: "{ id: string; title: string; }", responseType: "{ id: string; title: string; } | undefined" },{ name: "genreService:listAll", service: "genreService", method: "listAll", access: "Read", entryScoped: false, payloadType: "Record<string, never>", responseType: "Pick<{ name: string; id: string; description: string | null; }, \"name\" | \"id\" | \"description\">[]" },{ name: "instanceService:attemptBeat", service: "instanceService", method: "attemptBeat", access: "Read", entryScoped: true, payloadType: "{ id: string; characterId: string; clientBeatTimeMs: number; }", responseType: "{ grade: \"Perfect\" | \"Great\" | \"Good\" | \"Bad\" | \"Miss\"; manaDelta: number; rateDelta: number; }" },{ name: "instanceService:createInstance", service: "instanceService", method: "createInstance", access: "Read", entryScoped: false, payloadType: "{ partyId: string; locationId: string; songId: string; }", responseType: "{ id: string; status: PrismaInstance[\"status\"]; }" },{ name: "instanceService:restartInstance", service: "instanceService", method: "restartInstance", access: "Read", entryScoped: true, payloadType: "{ id: string; }", responseType: "{ id: string; status: PrismaInstance[\"status\"]; startedAt?: Date | null; }" },{ name: "instanceService:startInstance", service: "instanceService", method: "startInstance", access: "Read", entryScoped: true, payloadType: "{ id: string; }", responseType: "{ id: string; status: PrismaInstance[\"status\"]; startedAt?: Date | null; }" },{ name: "instanceService:updateSettings", service: "instanceService", method: "updateSettings", access: "Read", entryScoped: true, payloadType: "{ id: string; songId?: string; locationId?: string; }", responseType: "{ id: string; songId?: string; locationId?: string; }" },{ name: "locationService:listLocations", service: "locationService", method: "listLocations", access: "Read", entryScoped: false, payloadType: "{ page?: number; pageSize?: number; }", responseType: "Pick<{ name: string; id: string; coordinates: string | null; image: string | null; difficulty: number; }, \"name\" | \"id\" | \"difficulty\">[]" },{ name: "memoryService:createMemory", service: "memoryService", method: "createMemory", access: "Read", entryScoped: false, payloadType: "{ title?: string; content: string; type?: string; tags?: string[]; associatedIds?: string[]; chatId?: string; agentId?: string; }", responseType: "{ memory: Record<string, unknown>; }" },{ name: "memoryService:findMemories", service: "memoryService", method: "findMemories", access: "Read", entryScoped: false, payloadType: "{ query: string; filters?: { chatId?: string; agentId?: string; userId?: string; type?: string; tags?: string[]; }; includeAssociationsDepth?: number; limit?: number; offset?: number; }", responseType: "{ results: import(\"/Users/root1/Dev/beat-sage/shared/types\").MemoryDTO[]; }" },{ name: "memoryService:getMemory", service: "memoryService", method: "getMemory", access: "Read", entryScoped: true, payloadType: "{ id: string; includeAssociationsDepth?: number; }", responseType: "{ memory?: import(\"/Users/root1/Dev/beat-sage/shared/types\").MemoryDTO; }" },{ name: "memoryService:linkMemories", service: "memoryService", method: "linkMemories", access: "Moderate", entryScoped: true, payloadType: "{ id: string; associate: string[]; bidirectional?: boolean; }", responseType: "{ id: string; associatedIds: string[]; }" },{ name: "memoryService:summarizeChatIfNeeded", service: "memoryService", method: "summarizeChatIfNeeded", access: "Moderate", entryScoped: false, payloadType: "{ chatId: string; }", responseType: "{ created: boolean; memory?: import(\"/Users/root1/Dev/beat-sage/shared/types\").MemoryDTO; }" },{ name: "memoryService:unlinkMemories", service: "memoryService", method: "unlinkMemories", access: "Moderate", entryScoped: true, payloadType: "{ id: string; remove: string[]; bidirectional?: boolean; }", responseType: "{ id: string; associatedIds: string[]; }" },{ name: "memoryService:updateMemory", service: "memoryService", method: "updateMemory", access: "Moderate", entryScoped: true, payloadType: "{ id: string; patch: Partial<{ title: string; content: string; type: string; tags: string[]; associatedIds: string[]; pinned: boolean; importance: number; acl: Array<{ userId: string; level: \"Read\" | \"Moderate\" | \"Admin\"; }>; }>; }", responseType: "{ memory?: import(\"/Users/root1/Dev/beat-sage/shared/types\").MemoryDTO; }" },{ name: "messageService:cancelStream", service: "messageService", method: "cancelStream", access: "Moderate", entryScoped: true, payloadType: "{ chatId: string; }", responseType: "{ cancelled: boolean; }" },{ name: "messageService:listMessages", service: "messageService", method: "listMessages", access: "Read", entryScoped: true, payloadType: "{ chatId: string; before?: string; limit?: number; }", responseType: "import(\"/Users/root1/Dev/beat-sage/shared/types\").ChatThreadMessage[]" },{ name: "messageService:postMessage", service: "messageService", method: "postMessage", access: "Read", entryScoped: true, payloadType: "{ chatId: string; content: string; role?: \"user\" | \"assistant\" | \"system\" | \"tool\"; }", responseType: "{ id: string; }" },{ name: "messageService:streamAssistantMessage", service: "messageService", method: "streamAssistantMessage", access: "Moderate", entryScoped: true, payloadType: "{ chatId: string; agentId?: string; modelId?: string; prompt?: string; }", responseType: "{ id: string; }" },{ name: "messageService:subscribeChatMessages", service: "messageService", method: "subscribeChatMessages", access: "Read", entryScoped: true, payloadType: "{ chatId: string; limit?: number; }", responseType: "import(\"/Users/root1/Dev/beat-sage/shared/types\").ChatThreadMessage[]" },{ name: "modelService:listActive", service: "modelService", method: "listActive", access: "Read", entryScoped: false, payloadType: "{ provider?: string; }", responseType: "{ id: string; provider: string; modelKey: string; displayName: string; }[]" },{ name: "modelService:listAll", service: "modelService", method: "listAll", access: "Read", entryScoped: false, payloadType: "{ provider?: string; page?: number; pageSize?: number; }", responseType: "{ id: string; provider: string; modelKey: string; displayName: string; }[]" },{ name: "modelService:recordUsage", service: "modelService", method: "recordUsage", access: "Moderate", entryScoped: false, payloadType: "{ id: string; inputTokens?: number; outputTokens?: number; }", responseType: "{ id: string; totalRequests: number; totalInputTokens: number; totalOutputTokens: number; }" },{ name: "partyService:createParty", service: "partyService", method: "createParty", access: "Read", entryScoped: false, payloadType: "{ hostCharacterId: string; }", responseType: "{ id: string; }" },{ name: "partyService:joinParty", service: "partyService", method: "joinParty", access: "Read", entryScoped: false, payloadType: "{ partyId: string; characterId: string; }", responseType: "{ id: string; }" },{ name: "partyService:leaveParty", service: "partyService", method: "leaveParty", access: "Read", entryScoped: false, payloadType: "{ partyId: string; characterId: string; }", responseType: "{ id: string; }" },{ name: "partyService:setReady", service: "partyService", method: "setReady", access: "Read", entryScoped: false, payloadType: "{ partyId: string; characterId: string; isReady: boolean; }", responseType: "{ partyId: string; characterId: string; isReady: boolean; }" },{ name: "partyService:subscribeWithMembers", service: "partyService", method: "subscribeWithMembers", access: "Read", entryScoped: true, payloadType: "{ partyId: string; }", responseType: "PartySnapshot" },{ name: "skillService:listMySkills", service: "skillService", method: "listMySkills", access: "Read", entryScoped: false, payloadType: "{ characterId: string; }", responseType: "{ name: string; id: string; createdAt: Date; updatedAt: Date; characterId: string; manaCost: number; damage: number; cooldownMs: number; lastCastAt: Date | null; mastery: number; totalCasts: number; priority: number | null; targetPriority: import(\"/Users/root1/Dev/beat-sage/node_modules/.prisma/client/index\").$Enums.TargetPriority; }[]" },{ name: "skillService:updateSkill", service: "skillService", method: "updateSkill", access: "Moderate", entryScoped: true, payloadType: "{ id: string; patch: { priority?: number | null; name?: string; manaCost?: number; damage?: number; cooldownMs?: number; }; }", responseType: "{ name: string; id: string; createdAt: Date; updatedAt: Date; characterId: string; manaCost: number; damage: number; cooldownMs: number; lastCastAt: Date | null; mastery: number; totalCasts: number; priority: number | null; targetPriority: import(\"/Users/root1/Dev/beat-sage/node_modules/.prisma/client/index\").$Enums.TargetPriority; } | undefined" },{ name: "songService:getSongBeats", service: "songService", method: "getSongBeats", access: "Read", entryScoped: false, payloadType: "{ songId: string; }", responseType: "Pick<{ id: string; songId: string; index: number; timeMs: number; direction: import(\"/Users/root1/Dev/beat-sage/node_modules/.prisma/client/index\").$Enums.Direction; holdMs: number; }, \"index\" | \"timeMs\" | \"direction\" | \"holdMs\">[]" },{ name: "songService:listSongs", service: "songService", method: "listSongs", access: "Read", entryScoped: false, payloadType: "{ genreId?: string; page?: number; pageSize?: number; }", responseType: "Pick<{ name: string; id: string; createdAt: Date; updatedAt: Date; genreId: string; src: string; }, \"name\" | \"id\" | \"genreId\">[]" },{ name: "userService:updateUser", service: "userService", method: "updateUser", access: "Moderate", entryScoped: true, payloadType: "{ id: string; data: import(\"/Users/root1/Dev/beat-sage/shared/types\").UpdateUserPayload; }", responseType: "{ name: string | null; id: string; acl: Prisma.JsonValue | null; createdAt: Date; updatedAt: Date; image: string | null; email: string; username: string | null; emailVerified: Date | null; serviceAccess: Prisma.JsonValue | null; } | undefined" }];
export const TOOLS_BY_SERVICE: Record<string, ToolSpec[]> = ALL_TOOLS.reduce((acc, t) => { (acc[t.service] = acc[t.service] || []).push(t); return acc; }, {} as Record<string, ToolSpec[]>);
